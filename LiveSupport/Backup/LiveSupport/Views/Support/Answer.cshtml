@{
    Layout = "~/Views/Shared/SupportLayout.cshtml";
    ViewBag.Title = "Support";
}
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.signalR.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.dd.js")" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/dd.css")" />
    <script type="text/javascript" src="/signalr/hubs"></script>
    @section Scripts{
        <script src="@Url.Content("~/Scripts/knockout-1.3.0beta.js")" type="text/javascript"></script>
    }


     <script type="text/javascript">
         var chat;
         var viewModel;

         this.scrollToBottom = function (aTab) {
             $("#tabs-" + aTab + " > .chatBox > .chatContainer").animate({ scrollTop: $("#tabs-" + aTab + " > .chatBox > .chatContainer")[0].scrollHeight });
         };


         function Notifier() { }

         // Returns "true" if this browser supports notifications.
         Notifier.prototype.HasSupport = function () {
             if (window.webkitNotifications) {
                 return true;
             } else {
                 return false;
             }
         }

         // Request permission for this page to send notifications. If allowed,
         // calls function "cb" with true.
         Notifier.prototype.RequestPermission = function (cb) {
             window.webkitNotifications.requestPermission(function () {
                 if (cb) { cb(window.webkitNotifications.checkPermission() == 0); }
             });
         }

         // Popup a notification with icon, title, and body. Returns false if
         // permission was not granted.
         Notifier.prototype.Notify = function (icon, title, body) {
             if (window.webkitNotifications.checkPermission() == 0) {
                 var popup = window.webkitNotifications.createNotification(
                    icon, title, body);
                 popup.show();
                 setTimeout( function() { popup.cancel() }, 10000 );
                 return true;
             }

             return false;
         }


         $(function () {
             var notifier = new Notifier();
             if (notifier.HasSupport()) {
                 if (window.webkitNotifications.checkPermission() == 1) {
                     $("#request-permissions").show();
                 }
                 else {
                     $("#request-permissions").show();
                 }
             }
             chat = $.connection.liveSupport;
             $.connection.hub.start(
                function () {
                    chat.logInAsOperator('@ViewBag.Company');
                }
             );

             $("#btnExpandOnlineClients").click(function () {
                 if ($("#tableOnlineClients").is(":visible")) {
                     $("#tableOnlineClients").hide("slow");
                     $("#btnExpandOnlineClients").html("Show");
                 }
                 else {
                     $("#tableOnlineClients").show("slow");
                     $("#btnExpandOnlineClients").html("Hide");
                 }
             });

             var $tab_title_input = $("#tab_title"),
             $tab_content_input = $("#tab_content");
             var tab_counter = 0;

             var $tabs = $("#tabs").tabs({
                 tabTemplate: "<li><a href='#{href}'>#{label}</a> <span class='ui-icon ui-icon-close'>Remove Tab</span></li>",
                 add: function (event, ui) {
                     var client = viewModel.findByTab(tab_counter);
                     var tab_content =

            '<div class="chatBox"> <div class="chatContainer"> <ul id="messages" style="list-style-type:none; margin-left:-1em;"></ul></div><div id="buttons">@Html.Raw(Html.DropDownList("Responses", String.Empty).ToString().Replace("\r\n",""))<button onclick="addCannedResponse(' + tab_counter + ')">Add</button><br/><textarea id="txtMessage" style="resize:none; width:95%;"> </textarea>' +
                    '<button id="btnSendMessage" onclick="SendMessageToServer(' + tab_counter + ');" >Send</button><div id="PartyIsTyping"/></div></div>' +
                    '<table style="height:300px"><tr><th>DateTime</th><td>' + formatDate(client.Browser.LogOnTime) + '</td></tr> <tr><th>Name</th><td>' + client.UserInfo.Name + '</td></tr> <tr><th>E-mail</th><td>' + client.UserInfo.eMail + '</td></tr> <tr><th>Question</th><td>' + client.UserInfo.Question + '</td></tr> <tr><th>Country</th><td>' + client.Browser.Country + '</td></tr> <tr><th>User agent</th><td>' + client.Browser.UserAgent + '</td></tr> <tr><th>URL</th><td>' + client.Browser.CurrentPage + '</td></tr></table>';
                     $(ui.panel).append(tab_content);
                 },
                 select: function (event, ui) {
                     $(ui.tab).css('background-color', '');
                 }
             });

             // actual addTab function: adds new tab using the title input from the form above
             function addTab() {
                 var tab_title = "Tab " + tab_counter;
                 $tabs.tabs("add", "#tabs-" + tab_counter, tab_title);
                 $tabs.tabs('select', '#tabs-' + tab_counter);
                 tab_counter++;
             }

             chat.receive = function (name, message, clientID) {
                 var c = viewModel.findByClientID(clientID);
                 $("#tabs-" + c.tab + " > .chatBox > .chatContainer > #messages").append("<li> " + showtime() + " " + name + ": " + message + "</li>");
                 scrollToBottom(c.tab);
                 // Notify user if tab is not current
                 var selected_tab_index = $tabs.tabs('option', 'selected');
                 $('a[href="#tabs-' + c.tab + '"]').css('background-color', 'red');
                 $('li.ui-tabs-selected > a').css('background-color', '')

                 $("#tabs-" + c.tab + " > .chatBox > #buttons > #PartyIsTyping").html('');
             }

             chat.isTyping = function (name, clientID){
                 var c = viewModel.findByClientID(clientID);
                 $("#tabs-" + c.tab + " > .chatBox > #buttons > #PartyIsTyping").html('Party is typing...');
             }

             function showtime() {
                 var now = new Date();
                 var hours = now.getHours();
                 var minutes = now.getMinutes();
                 var seconds = now.getSeconds()

                 if (hours < 10) hours = "0" + hours;
                 if (minutes < 10) minutes = "0" + minutes;
                 if (seconds < 10) seconds = "0" + seconds;
                 return hours + ":" + minutes + ":" + seconds;
             }

             chat.clientAsksForSupport = function (aClientID, aUserInfo, aBrowser) {
                 viewModel.addClient(aClientID, aUserInfo, aBrowser);
                 notifier.Notify("https://moplig.com/images/icons/exclamation.png", "Moplig.com Live Support chat", "New client asks for support!");
             }

             chat.clientHasGivenUp = function (aClientID) {
                 viewModel.removeClient(aClientID);
             }

             chat.clientHasComeOnline = function (aClientID, aBrowser) {
                 viewModel.addOnlineClient(aClientID, aBrowser);
                 viewModel.pageviews(viewModel.pageviews() + 1);
                 @{if (ViewBag.Profile.NotifyOnNewOnlineClient != null && ViewBag.Profile.NotifyOnNewOnlineClient) { 
                    <text>notifier.Notify("", "Moplig.com Live Support chat", "New client has come online!");</text>
                    }
                 }
             }

             chat.clientHasChangedDetails = function (aClientID, InvitedToChat) {
                // Find client and change details
                var c = viewModel.findByOnlineClientID(aClientID);
                c.InvitedToChat(InvitedToChat);
             }

             function client(ClientID, UserInfo, Browser) {
                 return {
                     tab: 0,
                     WaitingTime: ko.observable(0),
                     ClientID: ko.observable(ClientID),
                     InvitedToChat: ko.observable(false),
                     Browser: Browser,
                     UserInfo: UserInfo,
                     acceptSupportCall: function () {
                         chat.acceptSupportCall(ClientID);
                         this.tab = tab_counter;
                         viewModel.acceptedClients.push(this);
                         addTab();
                         viewModel.clients.remove(this);
                     },
                     inviteToChat: function () {
                         chat.inviteToChat(ClientID);
                     }
                 };
             }

             viewModel = {
                 pageviews: ko.observable(0),
                 totalTime: ko.observable(0),
                 acceptedClients: ko.observableArray(),
                 clients: ko.observableArray(),
                 onlineClients: ko.observableArray(),
                 addClient: function (ClientID, aUserInfo, aBrowser) {
                     this.clients.push(new client(ClientID, aUserInfo, aBrowser));
                 },
                 addOnlineClient: function (ClientID, aBrowser) {
                     this.onlineClients.push(new client(ClientID, null, aBrowser));
                 },
                 removeClient: function (ClientID) {
                     this.clients.remove(function (item) {
                         return item.ClientID() == ClientID;
                     });
                     this.onlineClients.remove(function (item) {
                         if (item.ClientID() == ClientID) {
                             viewModel.totalTime(viewModel.totalTime() + item.WaitingTime());
                             return true;
                         }
                         else {
                             return false;
                         }
                     });
                 },
                 findByTab: function (aTab) {
                     return ko.utils.arrayFirst(this.acceptedClients(), function (item) {
                         return item.tab == aTab;
                     });
                 },
                 findByClientID: function (aClientID) {
                     return ko.utils.arrayFirst(this.acceptedClients(), function (item) {
                         return item.ClientID() == aClientID;
                     });
                 },
                 findByOnlineClientID: function (aClientID) {
                     return ko.utils.arrayFirst(this.onlineClients(), function (item) {
                         return item.ClientID() == aClientID;
                     });
                 },
                 increaseWaitingTime: function () {
                     ko.utils.arrayForEach(this.clients(), function (item) {
                         item.WaitingTime(parseInt(item.WaitingTime()) + 1);
                     });
                     ko.utils.arrayForEach(this.onlineClients(), function (item) {
                         item.WaitingTime(parseInt(item.WaitingTime()) + 1);
                     });

                 }

             };

             viewModel.avgTimePerPage = ko.dependentObservable(function () {
                 if (this.pageviews() > 0) {
                     return this.totalTime() / this.pageviews();
                 }
                 else {
                     return 0;
                 }
             }, viewModel);

             ko.applyBindings(viewModel);

             $("#request-permission").click(function () {
                 notifier.RequestPermission();
             });

             // close icon: removing the tab on click
             // note: closable tabs gonna be an option in the future - see http://dev.jqueryui.com/ticket/3924
             $("#tabs span.ui-icon-close").live("click", function () {
                 var index = $("li", $tabs).index($(this).parent());
                 var answer = confirm("Do you really want to close this tab?");
                 if (answer) {
                     $tabs.tabs("remove", index);
                 }
             });

             setInterval('updateWaitingTime()', 1000);

             $("#statusmenu").msDropDown();
         });


         function changeStatus(value) {
             if (value == 'online') {
                 chat.logInAsOperator('@ViewBag.Company');
             }
             if (value == 'offline') {
                 chat.operatorLogOff();
                 
             }
         }


         function SendMessageToServer(aTab) 
         {
             chat.name = 'operator';
             chat.sendOperatorMessage($('#tabs-' + aTab +  '> .chatBox > #buttons > #txtMessage').val(), viewModel.findByTab(aTab).ClientID()); 
             $('#tabs-' + aTab +  '> .chatBox > #buttons > #txtMessage').val('');
         }

         function addCannedResponse(aTab)
         {
            $('#tabs-' + aTab +  '> .chatBox > #buttons > #txtMessage').val(
                $('#tabs-' + aTab +  '> .chatBox > #buttons > #Responses').val()
            );
         }

         function formatDate(datetime) {
             var dateObj = new Date(parseInt(datetime.replace("/Date(", "").replace(")/", ""), 10));
             var dateStr = dateObj.getDate() + "/" + (dateObj.getMonth() + 1) + "/" + dateObj.getFullYear() + " " + dateObj.getHours() + ":" + dateObj.getMinutes() + ":" + dateObj.getSeconds();
             return dateStr; // will return mm/dd/yyyy
         }

         function updateWaitingTime() {
             // Update waiting time for client
             viewModel.increaseWaitingTime();
         }


     </script>    
     <style>
        
         #client ul
         {
             margin-left: -1em;
         }
         
         #client ul li
         {
             margin-left: -1em;
         }
         
         .chatContainer{
            overflow:auto; 
            height:150px;              
            width:400px; 
         }
         
         .chatBox
         {
            width:400px; 
             display:block;
             float:left;
             -moz-border-radius:5px;
             -moz-border-radius:5px;                          
             border-radius:5px;
            -moz-box-shadow: 10px 10px 5px #888;
            -webkit-box-shadow: 10px 10px 5px #888;
            box-shadow: 10px 10px 5px #888;
            margin-right:15px;
         }
         
        #tabs li .ui-icon-close {
            cursor: pointer;
            float: left;
            margin: 0.4em 0.2em 0 0;
        }         
        
        .chatContainer ul li 
        {
            margin-left:-1em;            
        }
     </style>

    <div>

         <select id="statusmenu" style="width:150px; display:block;" onchange="changeStatus(this.value)" >
            <option value="online" title="@Url.Content("~/images/icons/user-online.png")">Online</option>
            <option value="offline" title="@Url.Content("~/images/icons/user-offline.png")">Offline</option>
        </select>

    
    <div id="tabs">
        <ul>
            <li><a href="#OperatorInfo">Operator</a></li>
        </ul>
        <div id="OperatorInfo">
            <table>
                <tbody>
                    <tr>
                        <th>Name</th>
                        <td>@ViewBag.Profile.FullName</td>
                    </tr>
                    <tr>
                        <th>Company</th>
                        <td>@ViewBag.CompanyName</td>
                    </tr>
                    <tr>
                        <th>Login Date</th>
                        <td>@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")</td>
                    </tr>
                </tbody>
            </table>
             <ul id="messages" style="list-style-type:none; margin-left:-1em;"></ul>
        </div>
    </div>

        <div id="stats">
            <table style="width:100%">
                <caption>Statistics</caption>
                <thead>
                    <tr>
                        <th>Page Views</th>
                        <th>Avg time per page (sec)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><span data-bind="text: pageviews"></span></td>
                        <td><span data-bind="text: avgTimePerPage().toFixed(1)"></span></td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div id="clients">

        <table style="width:100%">
            <caption>@ViewRes.Support.Answer.Clients (<span data-bind='text: clients().length'></span>)</caption>
            <thead>
            <tr>
                <th>Waiting time</th>
                <th>DateTime</th>
                <th>Country</th>
                <th>UserAgent</th>
                <th>Current URL</th>
                <th>User details</th>
                <th>Action</th>
            </tr>
            </thead>
            <tbody data-bind='template: {name:"clientsTemplate", foreach:clients}'>
            </tbody>
        </table>

        <script id="clientsTemplate" type="text/x-jQuery-tmpl">
                    <tr data-bind="style: { backgroundColor: WaitingTime() > 15 ? 'red' : '' }">
                     <td><h3 data-bind="text: WaitingTime"></h3></td>
                     <td>${ formatDate($data.Browser.LogOnTime)}</td>
                     <td>${ $data.Browser.Country}</td>
                     <td>${ $data.Browser.UserAgent}</td>
                     <td>${ $data.Browser.CurrentPage}</td>
                     <td>${ $data.UserInfo.Name} <br/>${ $data.UserInfo.eMail} <br/> ${ $data.UserInfo.Question}</td>
                     <td> <button data-bind="click:acceptSupportCall">Accept</button></td>
                     </tr>
        </script>
        </div>

        <div id="onlineClients">
          <div style="width:100%; display:block; text-align:center;">@ViewRes.Support.Answer.OnlineClients (<span data-bind='text: onlineClients().length'></span>) <a href="#" id="btnExpandOnlineClients">Show</a></div>
          <div id="tableOnlineClients" style="display:none">
                <table style="width:100%">
                    <thead>
                    <tr>
                        <th>Waiting time</th>
                        <th>DateTime</th>
                        <th>Country</th>
                        <th>UserAgent</th>
                        <th>Current URL</th>
                        <th>Invited?</th>
                        <th>Action</th>
                    </tr>
                    </thead>
                    <tbody data-bind='template: {name:"onlineClientsTemplate", foreach:onlineClients}'>
                    </tbody>
                </table>
            </div>

        <script id="onlineClientsTemplate" type="text/x-jQuery-tmpl">
                    <tr 
                    {{if parseInt($data.WaitingTime) > 5 }} 
                        style="background-color:red" 
                    {{/if}} >
                     <td><h3 data-bind="text: WaitingTime"></h3></td>
                     <td>${ formatDate($data.Browser.LogOnTime)}</td>
                     <td>${ $data.Browser.Country}</td>
                     <td>${ $data.Browser.UserAgent}</td>
                     <td>${ $data.Browser.CurrentPage}</td>
                     <td>${ $data.InvitedToChat}</td>
                     <td> <button data-bind="click:inviteToChat">Invite</button></td>
                     </tr>
        </script>
        </div>

        <div id="request-permission" style="border-width: 2px; border-style: dotted; cursor: pointer">Request permission for desktop notification!</div>
    </div>

